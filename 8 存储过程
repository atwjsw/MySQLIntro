1）存储过程简介

- SQL命令->MySQL引擎->语法正确->可识别命令->执行->执行结果->客户端
- 如果能够省略语法分析和编译环节，MySQL的效率就可以提高，就需要存储过程
- 存储过程是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理

优点
- 增强SQL语句的功能和灵活性 (控制语句、判断语句)
- 实现较快的执行速度（预编译）
- 减少网络流量 （单个提交数据量少，多个操作可以一次提交）

2）语法结构
CREATE
[DEFINER = {user|CURRENT_USER}]
PROCEDURE sp_name ([proc_parameter[,...]])
[characteristic...] routine_body

proc_parameter:
[IN | OUT | INOUT] param_name type

过程体：
- 函数体有合法的SQL语句构成
- 可以是简单的SELECT和INSERT语句
- 如果是符合结构则使用BEGIN...END语句
- 复合结构可以包含声明，循环，控制结构

3）创建不带参数的存储过程
-- 换取MySQL版本的存储过程
CREATE PROCEDURE sp1()
SELECT VERSION();

4）调用存储过程
CALL sp_name([parameter[,...]])
CALL sp_name[()]

5）修改存储过程

ALTER PROCEDUREsp_name [characteristic...]
COMMENT 'string'
|{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA}
|SQL_SECURITY {DEFINER|INVOKER}

不能修改过程体。只能删除和重建

DROP PROCEDURE [IF EXISTS] sp_name

6) 创建带有IN类型参数的存储过程
-- 以下存储过程错误删除了所有表记录
CREATE PROCEDURE removeUserById(IN id INT UNSIGNED)
BEGIN 
DELETE FROM users WHERE id = id;
END

-- 重新插入测试记录
INSERT users VALUES
(DEFAULT, 'Tom1', 'tom123', DEFAULT, 1),
(DEFAULT, 'Tom2', 'tom123', 30, 1),
(DEFAULT, 'Tom3', md5('tom123'), 40, 1);

DELIMITER //

-- 把id改成p_id
CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)
BEGIN 
DELETE FROM users WHERE id = p_id;
END

DELIMITER ;

7) 创建带有IN和OUT类型参数的存储过程
-- 删除记录并返回剩余的记录数
CREATE PROCEDURE removeUserAndReturnUserNum(IN p_id INT UNSIGNED, OUT user_num INT UNSIGNED)
BEGIN 
DELETE FROM users WHERE id = p_id;
SELECT COUNT(id) FROM users INTO user_num;
END

-- @num声明变量，用户变量，与MySQL客户端绑定
-- 在BEGIN END中DECLARE的变量是局部变量
CALL removeUserAndReturnUserNum(13, @num);

8）创建带有多个类型参数的存储过程
-- 能够根据年龄删除记录，返回删除的用户数和剩余的用户数

-- ROW_COUNT(); 插入，更新影响的记录数
INSERT test(username) VALUES ('A'),('B'),('C');
SELECT ROW_COUNT(); -- 3

UPDATE test SET username=CONCAT(username, '--imooc') WHERE id <=2;
SELECT ROW_COUNT(); -- 2

CREATE PROCEDURE removeUserByAgeAndReturnInfos (IN p_age SMALLINT UNSIGNED, OUT del_cnt SMALLINT UNSIGNED, OUT user_cnt SMALLINT UNSIGNED)
BEGIN
DELETE FROM users WHERE age = p_age;
SELECT ROW_COUNT() INTO del_cnt;
SELECT COUNT(id) FROM users INTO user_cnt;
END

CALL removeUserByAgeAndReturnInfos(30, @del_cnt, @user_cnt);

SELECT @del_cnt; -- 2
SELECT @user_cnt; -- 4

9) 存储过程与自定义函数的区别
- 存储过程实现的功能要复杂一些；而函数的针对性更强
- 在实际工作中，很少用函数对表进行操作，经常用存储过程对表进行操作
- 存储过程可以返回多个值；函数只能返回一个值
- 存储过程一般独立的来执行；而函数可以作为其他SQL语句的组成部分来出现
- 存储过程可以返回多个












