一、登录和常用命令
mysql -V 看版本

mysql -uroot -p -P3306 -h127.0.0.1

exit/quit

修改MySQL提示符：
未登录状态：mysql -uroot -proot --prompt \h
已登录状态：mysql>prompt \u@\h \d

显示当前服务器版本：select version();

显示当前日期时间：select now();

显示当前用户： select user();

查看历史告警
SHOW WARNINGS;

MySQL语句的规范
- 关键字与函数名称全部大写 （为了区分关键字和库表名）
- 数据库名称、表名称、字段名称全部小写
- SQL语句必须以分号结尾

二、数据库操作

创建数据库
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name
[DEFAULT] CHARACTER SET [=] charset_name

e.g. CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;

查看数据库
SHOW {DATABASES | SCHEMAS} [LIKE 'pattern' | WHERE expr]

查看数据库创建时的指令
SHOW CREATE DATABASE t1;

修改数据库
ALTER {DATABASE | SCHEMA} [db_name] [DEFAULT] CHARACTER SET [=] charset_name

删除数据库
DROP {DATABASE | SCHEMA} [IF EXISTS] db_name


三、数据类型

数据类型是指列、存储过程参数、表达式和局部变量的数据特征，它决定了数据的存储格式，代表了不同的信息类型。

1）整形
TINYINT  255  占用1Byte、年龄
SMALLINT 65535  占用2Byte
INT 16777215    占用3Byte
MEDIUMINT 4294967295  占用4Byte
BIGINT 18446744073709551615 占用8Byte

有符号位 Vs. 无符号位
有符号位一位这最高位存储0-1表示正负数，所有剩下的数字能表示的绝对范围就小了
选择合适的数据类型，够用就好。

2）浮点型
单精度浮点 
FLOAT[(M,D)]

双精度浮点
DOUBLE[(M,D)]

一般用FLOAT就够用了

3）日期时间型
类型      存储需求  范围
YEAR      1         1000-9999
TIME      3         -8385959-8385959
DATE      3         1000-01-01 to 9999-12-31
DATETIME  8         1000-01-01：00：00：00 to 9999-12-31：23：59：59   
TIMSTAMP  4         1970-01-01 to 2037-12-31间的毫秒值

由于跨时区的原因，实际开发中一般比较少用日期时间型，而采用数字类型保存时间戳。

4）字符型
CHAR（M)       M个字节， 0<=M<=255 （定长）
VARCHAR(M)     L+1个字节，其中L<=M且0<=M<=65535
TINYTEXT       L+1个字节, 其中L <2^8
TEXT           2^16
MEDIUMTEXT     2^24
LONGTEXT       2^32
ENUM('value1','value2',...) 1或2个字节，取决于枚举值的个数（最多65535个值）

5）SET('value1','value2',...)  1、2、3、4或者8个字节，取决于set成员的数目（最多64个成员）

4）数据表
数据表是数据库最重要的组成部分之一，是其他对象的基础。

USE test;
SELECT DATABASE();

-- 创建数据表
CREATE TABLE [IF NOT EXISTS] table_name (
  column_name data_type,
  ...
)

// 显示数据表
SHOW TABLES [FROM db_name] [LIKE 'pattern' | WHERE expr]

// 显示表结构
SHOW COLUMNS FROM [tbl_name]

5) 插入记录
INSERT [INTO] tbl_name [(col_name,...)] VALUES(val,...)

6）查询记录
SELECT　expr,... FROM tbl_name

7) 空值与非空
NULL vs. NOT NULL

CREATE TABLE tb2 (
  username VARCHAR(20) NOT NULL;
  age TINYINT UNSIGNED NULL;
);

8) 自动编号 AUTO_INCREMENT
- 保证字段的唯一性
- 自动编号，必须与主键组合使用
- 默认情况下，起始值为1，每次增量为1

CREATE TABLE tb3(
  id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(30) NOT NULL
);

9) 主键 PRIMARY KEY
- 主键约束 （保证记录的唯一性）
- 每张数据表只能存在一个主键
- 主键保证记录的唯一性
- 主键自动为NOT NULL

CREATE TABLE tb4(
  id SMALLINT UNSIGNED PRIMARY KEY,
  username VARCHAR(30) NOT NULL
);

10) 唯一键 UNIQUE KEY
- 唯一约束
- 唯一约束可以保证记录的唯一性
- 唯一约束的字段可以为空值（NULL)
- 每张表可以存在多个唯一约束

CREATE TABLE tb5 (
  id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(20) NOT NULL UNIQUE KEY,
  age TINYINT UNSIGNED
);

11) 默认值 DEFAULT
当插入记录时，如果没有明确为字段赋值，则自动赋予默认值

CREATE TABLE tb6 (
  id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(20) NOT NULL UNIQUE KEY,
  sex enum('1','2','3') DEFAULT '3' -- 男，女，保密，默认保密 
);

12) 约束
- 约束保持数据的完整性和一致性。
- 约束分为表级约束和列级约束。
- 约束类型包括：
NOT NULL（非空约束）
PRIMARY KEY (主键约束)
UNIQUE KEY （唯一约束）
DEFAULT （默认约束）
FOREIGN KEY (外键约束）

13）外键约束 FORIEGN KEY
- 保持数据一致性，完整性。
- 实现一对一或一对多关系。

外键约束的要求：
- 父表和子表（具有外键列的表）必须使用相同的存储引擎，而且禁止使用临时表。
- 数据表的存储引擎只能为InnoDB。
- 外键列和参照列必须具有相似的数据类型。其中数字长度或者是否有符号位必须相同；而字符的长度则可以不同。
- 外键类和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引。

编辑数据表的默认存储引擎
- MySQL配置文件（my.ini): default-storage-engine=INNODB

-- 外键Demo
CREATE TABLE provinces (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  pname VARCHAR(20) NOT NULL
);

-- 查看默认引擎；
SHOW CREATE TABLE provinces；

-- pid 与 id 数据长度不同，创建表报错
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid BIGINT,
  FOREIGN KEY (pid) REFERENCES provinces (id)
);

-- pid 与 id 数据长度相同，有符号位不同，创建表仍然报错
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid SMALLINT,
  FOREIGN KEY (pid) REFERENCES provinces (id)
);

-- pid 与 id 数据长度相同，有符号位不同，创建表仍然报错
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid SMALLINT UNSIGNED,
  FOREIGN KEY (pid) REFERENCES provinces (id)
);

有外键的表是子表（users），参照列的表是父表（provinces）

-- 检查索引
SHOW INDEXES FROM provinces;

--以网格形式呈现，容易看 
SHOW INDEXES FROM provinces/G;

外键约束的参照操作 （父表参照列变化时，子表是否做相应的变化）
- CASCADE： 从父表删除或者更新且自动删除或更新子表中匹配的行
- SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL。
- RESTRICT：拒绝对父表的删除或更新操作。
- NO ACTION：标准SQL的关键字，在MySQL中与RESTRICT相同

-- 子表创建时，指定外键为CASCADE模式
CREATE TABLE users1 (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid SMALLINT UNSIGNED,
  FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE
);

-- 在provinces表中插入实验记录
INSERT provinces (pname) VALUES ('A');

-- 在users1表中插入实验记录, 成功
INSERT users1 (username, pid) VALUES ('Tom', 1);

-- 不成功，由于父表provinces id中没有7.
INSERT users1 (username, pid) VALUES ('Tom', 7);

-- 删除省份表中的记录3会把子表中pid=3的记录删除掉
DELETE FROM provinces WHERE id=3;

******************************************************
实际工作中一般不用物理的外键，而是使用逻辑的外键，原因是MYISAM不支持。所谓逻辑的外键是通过结构方式的定义，而不是使用物理外键。
******************************************************

14) 表级约束或列级约束
- 对一个数据列建立的约束，称为列级约束。
- 对多个数据列建立的约束，称为表级约束。
- 列级约束既可以在列定义时声明，也可以在列定义后声明。
- 表级约束只能在列定义后声明。

15）修改数据表

添加单列
ALTER TABLE tbl_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name]

-- 在最后插入age列
ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;

-- 在username后插入password列
ALTER TABLE users1 ADD password VARCHAR(32) NOT NULL AFTER username;

-- 在最前插入truename列
ALTER TABLE users1 ADD truename VARCHAR(20) NOT NULL FIRST;

添加多列 (添加多列不能指定位置关系，只能在最后)
ALTERTABLE tbl_name ADD [COLUMN] (col_name column_definition,...)

删除列
ALTER TABLE tbl_name DROP [COLUMN] col_name

-- 删除truename列
ALTER TABLE users1 DROP truename;

-- 同时删除password和age列
ALTER TABLE users1 DROP password, DROP age;

16）修改约束

添加主键约束：
ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...)

-- 创建了一个没有主键的表
CREATE TABLE users2 (
  username VARCHAR(20) NOT NULL,
  pid SMALLINT UNSIGNED
);

-- 先添加一列id
ALTER TABLE users2 ADD id SMALLINT UNSIGNED;

-- 在id上添加主键
ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);

添加唯一约束
ALTER TABLE tbl_name ADD [CONSTRAINT [sumbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name)

-- 为username添加唯一约束
ALTER TABLE users2 ADD UNIQUE (username);

添加外键约束
ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_definition

-- 为pid添加外键约束
ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces(id); 

添加/删除默认约束
ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}

-- 先添加一个age字段
ALTER TABLE users2 ADD age TINYINT UNSIGNED NOT NULL;

-- 为age添加默认约束
ALTER TABLE users2 ALTER age SET DEFAULT 15;

-- 删除age的默认约束
ALTER TABLE users2 ALTER age DROP DEFAULT;

17）删除约束

删除主键约束
ALTER TABLE tbl_name DROP PRIMARY KEY

-- 删除users2的主键约束
ALTER TABLE users2 DROP PRIMARY KEY;

删除唯一约束
ALTER TABLE tbl_name DROP {INDEX/KEY} index_name

-- 查看索引的名字
SHOW INDEXES FROM users2\G;

-- 删除唯一约束
ALTER TABLE users2 DROP INDEX username;

删除外键约束
ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol

-- 查看外键名称 users2_ibfk_1
SHOW CREATE TABLE users2;

-- 删除外键约束
ALTER TABLE users2 DROP FOREIGN KEY users2_ibfk_1;

-- 删除外键约束后，外键约束上的索引还存在，继续删除索引
ALTER TABLE users2 DROP INDEX pid;

18) 修改数据表

修改列定义
ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST | AFTER col_name]

-- 将users2的id字段移到最前面
ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;

-- 修改id的列定义为TINYINT, 可能会导致数据丢失
ALTER TABLE users2 MODIFY id TINYINT UNSIGNED NOT NULL;

修改列名称
ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name]

-- 修改id的列名称
ALTER TABLE users2 CHANGE pid p_id SMALLINT UNSIGNED;

数据表更名
方法1: ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name
方法2：RENAME TABLE tbl_name TO new_tbl_name [,tbl_name2 TO new_tbl_name2]...

-- 修改users2表名字
ALTER TABLE users2 RENAME users3;

*************************************
实际工作中尽量少用数据表和数据列的更名，当创建了索引，或者使用视图和存储过程中会引用表名和列名，变更名称会影响这些视图和存储过程的正常工作。
*************************************

四、记录操作（增删改查）

1) INSERT 插入记录
- 第一种插入方法（标准的INSERT）：
INSERT [INTO] tbl_name [(col_name,...)] {VALUES | VALUE} ({expr | DEFAULT},...), (...),...

- 插入值可以是表达式或者缺省值
- 可以一次插入多条记录

-- 创建demo表users
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(20) NOT NULL,
  password VARCHAR(32) NOT NULL,
  age TINYINT UNSIGNED NOT NULL DEFAULT 10,
  sex BOOLEAN
);

-- 插入所有字段, 列与值数量需一致，自增字段可以用NULL或DEFAULT作为值
INSERT users VALUES(NULL, 'Tom', 'tom123', 25, 1);
INSERT users VALUES(DEFAULT, 'Tom', 'tom123', 20, 1);

-- 使用表达式作为值
INSERT users VALUES(NULL, 'Tom', 'tom123', 3*8+5, 1);

-- 使用DEFAULT作为有默认值字段的输入值
INSERT users VALUES(DEFAULT, 'Tom', 'tom123', DEFAULT, 1);

-- 一次写入多条记录, 记录见用，分隔，使用函数md5作为值
INSERT users VALUES
(DEFAULT, 'Tom1', 'tom123', DEFAULT, 1),
(DEFAULT, 'Tom2', 'tom123', 30, 1),
(DEFAULT, 'Tom3', md5('tom123'), 40, 1);

- 第二种插入方法： 
INSERT [INTO] tbl_name SET col_name={expr | DEFAULT},...
说明：与第一种方法的区别在于，此方法可以使用子查询（SubQuery)
只能一次性插入一条记录

INSERT users SET username="Ben", password='456';

- 第三种插入方法：
INSERT [INTO] tbl_name [(col_name,...)] SELECT ...
说明：此方法可以将查询结果插入到指定数据表

-- 创建一个测试表
CREATE TABLE test(
  id TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(20)
);

-- 把users表中age>30的记录的用户名写入到test表
INSERT test(username) SELECT username FROM users WHERE age >= 30;

2）UPDATE 更新记录

- 第一种方式 （单表更新）
UPDATE [LOW_PRIORIRY] [IGNORE] table_reference SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ... [WHERE where_condition]

-- 所有记录age+5
UPDATE users SET age = age + 5;

-- 同时更新两个字段
UPDATE users SET age = age - id, sex = 0;

-- 根据WHERE条件更新
UPDATE users SET age = age + 10 WHERE id % 2 = 0;

3) DELETE 删除记录

- 第一种方法： 单表删除
DELETE FROM tbl_name [WHERE where_condition]

-- 删除id=6的记录
DELETE FROM users WHERE id = 6;

4）SELECT 查找记录 （占到操作的80%以上）
SELECT select_expr [, select_expr ...]
[
  FROM table_references
  [WHERE where_condition]
  [GROUP BY {col_name | position} [ASC | DESC], ...]
  [HAVING where_condition]
  [ORDER BY {col_name | expr | position} [ASC | DESC], ...]
  [LIMIT {[offset,] row_count | row_count OFFSET offset}]
]

-- 只有select_expr的查询语句
SELECT VERSION();
SELECT NOW();
SELECT 3 + 5;

查询表达式select_expr的说明：
- 每一个表达式表示想要的一列，必须有至少一个；
- 多个列之间以英文逗号分隔
- 星号（*)表示所有列。 tbl_name.*可以表示命名表的所有列。
- 查询表达式可以用[AS] alias_name为其赋予别名。
- 别名可用于GROUP BY， ORDER BY或HAVING子句。

-- 指定查询返回的列
SELECT id, username FROM users;

-- 查询返回的列的次序可以与原表列次序不同(影响结果集)
SELECT username, id FROM users;

-- 列前面可以加表名，多表连接查询时如果列名一样，则需要用表名区分
SELECT users.id, users.username FROM users;

-- 使用别名，字段名称过长不容易理解时，可以给列赋别名(影响结果集)
SELECT id AS userid, username AS uname FROM users;

WHERE条件表达式的说明
- 对记录进行过滤，如果没有指定WHERE子句，则显示所有记录。
- 在WHERE表达式中，可以使用MySQL支持的函数或运算符。

GROUP BY 查询结果分组
[GROUP BY {col_name|position} [ASC | DESC], ...]

-- 安装username分组
SELECT username FROM users GROUP BY username;

HAVING 分组条件
[HAVING where_condition]

-- 对部分记录进行分组
SELECT username FROM users GROUP BY username HAVING age > 30;

-- 采用聚合函数对部分记录进行分组: 记录分组后，组记录数量大于2的username
SELECT username FROM users GROUP BY username HAVING count(id) > 2;

ORDER BY 对查询结果进行排序

-- 降序排序
SELECT * FROM users ORDER BY id DESC;

-- 多字段排序, 如果username都不同，则以下两条语句返回的结果相同
-- 否则，会在对username排序的基础上，相同的username再安装id排序
SELECT * FROM users ORDER BY username;
SELECT * FROM users ORDER BY username, id DESC;

LIMIT 限制查询结果返回的数量 (可实现分页效果)
[LIMIT {[offset,] row_count | row_count OFFSET offset}]

-- 只返回两条记录，默认从第一条开始
SELECT * FROM users LIMIT 2;

-- 返回两条记录，从第三条开始（返回记录数从0开始算）
SELECT * FROM users LIMIT 2,2;

-- 记录的位置是以返回的结果集为参照
SELECT * FROM users ORDER BY id DESC LIMIT 2,2;

四、子查询
1）数据准备

-- 创建数据表

  CREATE TABLE IF NOT EXISTS tdb_goods(
    goods_id    SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    goods_name  VARCHAR(150) NOT NULL,
    goods_cate  VARCHAR(40)  NOT NULL,
    brand_name  VARCHAR(40)  NOT NULL,
    goods_price DECIMAL(15,3) UNSIGNED NOT NULL DEFAULT 0,
    is_show     BOOLEAN NOT NULL DEFAULT 1,
    is_saleoff  BOOLEAN NOT NULL DEFAULT 0
  );

 -- 写入记录

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('R510VC 15.6英寸笔记本','笔记本','华硕','3399',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Y400N 14.0英寸笔记本电脑','笔记本','联想','4899',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('G150TH 15.6英寸游戏本','游戏本','雷神','8499',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X550CC 15.6英寸笔记本','笔记本','华硕','2799',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X240(20ALA0EYCD) 12.5英寸超极本','超级本','联想','4999',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('U330P 13.3英寸超极本','超级本','联想','4299',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('SVP13226SCB 13.3英寸触控超极本','超级本','索尼','7999',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iPad mini MD531CH/A 7.9英寸平板电脑','平板电脑','苹果','1998',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iPad Air MD788CH/A 9.7英寸平板电脑 （16G WiFi版）','平板电脑','苹果','3388',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' iPad mini ME279CH/A 配备 Retina 显示屏 7.9英寸平板电脑 （16G WiFi版）','平板电脑','苹果','2788',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('IdeaCentre C340 20英寸一体电脑 ','台式机','联想','3499',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Vostro 3800-R1206 台式电脑','台式机','戴尔','2899',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iMac ME086CH/A 21.5英寸一体电脑','台式机','苹果','9188',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('AT7-7414LP 台式电脑 （i5-3450四核 4G 500G 2G独显 DVD 键鼠 Linux ）','台式机','宏碁','3699',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Z220SFF F4F06PA工作站','服务器/工作站','惠普','4288',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('PowerEdge T110 II服务器','服务器/工作站','戴尔','5388',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Mac Pro MD878CH/A 专业级台式电脑','服务器/工作站','苹果','28888',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' HMZ-T3W 头戴显示设备','笔记本配件','索尼','6999',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('商务双肩背包','笔记本配件','索尼','99',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X3250 M4机架式服务器 2583i14','服务器/工作站','IBM','6888',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('玄龙精英版 笔记本散热器','笔记本配件','九州风神','',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' HMZ-T3W 头戴显示设备','笔记本配件','索尼','6999',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('商务双肩背包','笔记本配件','索尼','99',DEFAULT,DEFAULT);

2) 子查询（Subquery)
- 是指出现在其他SQL语句内的SELECT子句
例如： 
SELECT * FROM t1 WHERE col1 = (SELECT col2 FROM t2);
SELECT * FROM t1 - Outer Query/Outer Statement
SELECT col2 FROM t2, 称为SubQuery子查询

- 子查询是嵌套在外查询内部。而事实上它有可能在子查询内部再嵌套子查询。子查询必须出现在圆括号之间。
- 子查询可以包含多个关键字或条件, 如DISTINCT， GROUP BY， ORDER BY， LIMIT，函数等。
- 子查询的外层查询可以是： SELECT， INSERT， UPDATE， SET或DO。

3）子查询的返回值
- 可以返回标量、一行、一列或子查询。被其他SQL语句来使用。

4）第一种子查询：使用比较运算符的子查询
- = > < >= <= <> != <=>
- 语法结构： operand comparison_operator subquery

-- 查找商品的平均价格， AVG是聚合函数，只有一个返回值
-- ROUND是四舍五入函数，保留到小数点后两位
SELECT AVG(goods_price) FROM tdb_goods;
SELECT ROUND(AVG(goods_price),2) FROM tdb_goods;

-- 查询哪些商品的价格大于平均价格
SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price > (SELECT ROUND(AVG(goods_price),2) FROM tdb_goods);

5) ANY，SOME或者ALL修饰的比较运算符
operand comparison_operator ANY (subquery)
operand comparison_operator SOME (subquery)
operand comparison_operator ALL (subquery)

-- 查询比任何超级本贵的商品的价格
SELECT goods_name, goods_price FROM tdb_goods WHERE goods_price > ANY (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本');

-- 查询比所有超级本贵的商品的价格
SELECT goods_name, goods_price FROM tdb_goods WHERE goods_price > ALL (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本');

-- 查询与任何超级本价格一样的商品的价格
SELECT goods_name, goods_price FROM tdb_goods WHERE goods_price = ANY (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本');

6）第二种子查询：使用【NOT] IN的子查询
语法结构：operand comparison_operator [NOT] IN (subquery)
=ANY 运算符与IN等效。
!=ALL或<>ALL运算符与NOT IN等效。

-- 查询与任何超级本价格不一样的商品的价格
SELECT goods_name, goods_price FROM tdb_goods WHERE goods_price !=ALL (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本');

-- !=ALL 等价于 NOT IN
SELECT goods_name, goods_price FROM tdb_goods WHERE goods_price NOT IN (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本');

-- 查询与任何超级本价格一样的商品的价格, =ANY 等价于 IN
SELECT goods_name, goods_price FROM tdb_goods WHERE goods_price IN (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本');

7) INSERT...SELECT 将查询结果写入数据表
INSERT [INTO] tbl_name [(col_name,...)] SELECT ...

-- 创建产品类别表
CREATE TABLE IF NOT EXISTS tdb_goods_cates (
  cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  cate_name VARCHAR(40) NOT NULL
);

-- 查找tdb_goods中的分类并插入到产品类别表
INSERT tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;

8）多表更新
UPDATE table_references
SET col_name1={expr1|DEFAULT}
[, col_name2={expr2|DEFAULT}] ...
[WHERE where_condition]

-- 参照产品分类表更新产品表, 使用内连接
UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id;  

9) CREATE...SELECT 
创建数据表同时将查询结果写入到数据表
CREATE TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)] select_statement

-- 一步创建品牌表同时插入数据
CREATE TABLE tdb_goods_brands (
  brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  brand_name VARCHAR(40) NOT NULL 
) 
SELECT brand_name FROM tdb_goods GROUP BY brand_name;

-- 参照品牌表更新商品表
UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name=b.brand_name SET g.brand_name=b.brand_id;

-- 修改goods_cate和brand_name字段名和定义, 不影响原有记录字段值
ALTER TABLE tdb_goods 
CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,
CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL; 

***********************************************************************
一般情况下不去对cate_id和brand_id设置FK物理外键，而是采用“事实外键”的形式
***********************************************************************

六、连接 

1) 数据准备

-- 分别在tdb_goods_cates和tdb_goods_brands表插入记录
   INSERT tdb_goods_cates(cate_name) VALUES('路由器'),('交换机'),('网卡');
   INSERT tdb_goods_brands(brand_name) VALUES('海尔'),('清华同方'),('神舟');

-- 在tdb_goods数据表写入任意记录, 注意这条记录的cate_id=12在tdb_goods_cates表中是没有对应记录的
   INSERT tdb_goods(goods_name,cate_id,brand_id,goods_price) VALUES(' LaserJet Pro P1606dn 黑白激光打印机','12','4','1849');

2）连接语法结构
- MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作。

- 一个条件On，两张表，三种类型（内连接，左外连接，右外连接）
table_reference
{[INNER]|CROSS} JOIN | {LEFT|RIGHT} [OUTER] JOIN}
table_reference
ON conditional_expr

table_reference 数据表参照
- tbl_name [[AS] alias] table subquery [AS] alias
- 数据表可以使用tbl_name AS alias_name或tbl_name alias_name赋予别名。
- table_subquery可以作为子查询使用在FROM子句中，这样的子查询必须为其赋予别名。

连接类型
- INNER JOIN：内连接，在MySQL中,JOIN,CROSS JOIN和INNER JOIN是等价的
- LEFT [OUTER] JOIN, 左外连接
- RIGHT [OUTER] JOIN, 右外连接

连接条件
- 使用ON关键字来设定连接条件，也可以用WHERE来代替。
- 通常使用ON关键字来设定连接条件，使用WHERE进行结果集记录的过滤。

内连接 INNER JOIN
- 显示左表及右表符合连接条件的记录（交集）

-- INNER JOIN tdb_goods 和 tdb_goods_cates, 返回22条记录
-- tdb_goods中cate_id在tdb_goods_cates中没有对应值的不返回
-- 类别表中的路由器等记录的cate_id在商品表中也没有对应值，因此不返回
SELECT goods_id, goods_name, cate_name FROM tdb_goods INNER JOIN tdb_goods_cates ON tdb_goods.cate_id = tdb_goods_cates.cate_id;

左外连接 LEFT JOIN
-显示左表的全部记录及右表符合连接条件的记录
- 语法：A LEFT JOIN B join_condition
- 数据表B的结果集依赖数据表A。
- 数据表A的结果集根据左连接条件依赖所有数据表（B表除外）。
- 左外连接条件决定如何检索数据表B（在没有指定WHERE条件的情况下）。
- 如果数据表A的某条记录符合WHERE条件，但是数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行。
- 如果使用内连接查找的记录在连接数据表中不存在，并且在WHERE子句中尝试以下操作：col_name IS NULL时，如果col_name被定义为NOT NULL, MySQL将在找到符合连接条件的记录后停止搜索更多的行。


-- LEFT JOIN tdb_goods 和 tdb_goods_cates, 返回23条记录
-- 包括左表tdb_goods的全部记录，以及右表tdb_goods_cates符合连接条件的记录
-- 类别表中的路由器等记录的cate_id在商品表中也没有对应值，因此不返回
SELECT goods_id, goods_name, cate_name FROM tdb_goods LEFT JOIN tdb_goods_cates ON tdb_goods.cate_id = tdb_goods_cates.cate_id;

右外连接 RIGHT JOIN
显示右表的全部记录及左表符合连接条件的记录

-- RIGHT JOIN tdb_goods 和 tdb_goods_cates, 返回25条记录
-- 包括右表tdb_goods_cates全部记录，以及左表tdb_goods符合连接条件的记录
-- 类别表中的路由器等记录也返回了
SELECT goods_id, goods_name, cate_name FROM tdb_goods RIGHT JOIN tdb_goods_cates ON tdb_goods.cate_id = tdb_goods_cates.cate_id;

*********************************************************************
三种连接中内连接用的相对多一些
*********************************************************************

3）多表连接 SELECT...INNER JOIN...INNER JOIN
SELECT goods_id, goods_name, cate_name, brand_name FROM tdb_goods AS g INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id
INNER JOIN tdb_goods_brands AS b ON g.brand_id=b.brand_id\G;

**********************************************************************
连接是外键的逆向操作，外键把表分成多张，连接把表联系在一起。
**********************************************************************

4）无限级分类表设计

-- 无限分类的数据表设计
CREATE TABLE tdb_goods_types(
  type_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  type_name VARCHAR(20) NOT NULL,
  parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0
);

-- 插入测试记录
INSERT tdb_goods_types(type_name,parent_id) VALUES('家用电器',DEFAULT);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑、办公',DEFAULT);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('大家电',1);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('生活电器',1);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('平板电视',3);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('空调',3);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电风扇',4);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('饮水机',4);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑整机',2);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑配件',2);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('笔记本',9);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('超级本',9);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('游戏本',9);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('CPU',10);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('主机',10);

自身连接
- 同一个数据表对其自身进行连接(要想象有两张相同表用不同别名去连接)

-- 查询子类型及其相应的父类型
SELECT s.type_id, s.type_name, p.type_name from tdb_goods_types AS s LEFT JOIN tdb_goods_types AS p ON s.parent_id = p.type_id;

-- 查询父类型及其相应的子类型
SELECT p.type_id, p.type_name, s.type_name FROM tdb_goods_types AS p
LEFT JOIN tdb_goods_types AS s ON p.type_id = s.parent_id; 

-- 查询父类型及其相应的子类型的数量
SELECT p.type_id, p.type_name, count(s.type_name) AS child_count FROM tdb_goods_types AS p
LEFT JOIN tdb_goods_types AS s ON p.type_id = s.parent_id GROUP BY p.type_name ORDER BY p.type_id; 

5）多表删除

-- 查找tdb_goods中重复记录
SELECT goods_id, goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) > 1;

-- 删除tdb_goods中的重复记录
DELETE t1 FROM tdb_goods AS t1 
INNER JOIN (SELECT goods_id, goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) > 1) AS t2 
ON t1.goods_name=t2.goods_name WHERE t1.goods_id > t2.goods_id; 

第6章 MySQL运算符及函数

1）字符函数
2）数值运算符与函数
3）比较运算符与函数
4）日期时间函数
5）信息函数
6）聚合函数
7）加密函数

1）字符函数
CONCAT() 字符连接
CONCAT_WS() 使用指定的分隔符
FORMAT() 数字格式化
LOWER() 转化成小写字母
UPPER() 转换成大写字母
LEFT()  获取左侧字符
RIGHT() 获取右侧字符
LENGTH() 获取字符串长度
LTRIM() 删除前导空格
RTRIM() 删除后续空格
TRIM() 删除前导和后续空格
SUBSTRING() 字符串截取
[NOT] LIKE 模式匹配
REPLACE() 字符串替换

-- CONCAT() 字符连接
SELECT CONCAT('imooc', 'mysql');
SELECT CONCAT('imooc','-','MySQL');
SELECT CONCAT(first_name, last_name) AS full_name FROM test;

-- CONCAT_WS() 使用指定的分隔符
SELECT CONCAT_WS('|','A','B','C');
SELECT CONCAT_WS('-','imooc','MySQL');

-- FORMAT() 数字格式化
SELECT FORMAT(12560.75,2);
SELECT FORMAT(12560.75,1);

-- LOWER() 转化成小写字母
SELECT LOWER('MySQL');

-- UPPER() 转换成大写字母
SELECT UPPER('MySQL');

-- LEFT() 获取左侧字符
SELECT LOWER('MySQL',2);
SELECT LOWER(LEFT('MySQL',2));

-- RIGHT() 获取左侧字符
SELECT RIGHT('MySQL',3);
SELECT LOWER(RIGHT('MySQL',3));

-- LENGTH() 获取字符串长度
SELECT LENGTH("My SQL");

-- LTRIM() 删除前导空格
SELECT LTRIM("  My SQL    ");
SELECT LENGTH(LTRIM("  My SQL    "));

-- RTRIM() 删除后续空格
SELECT LENGTH(RTRIM("  My SQL    "));

--TRIM() 删除前导和后续空格,中间的删不了
SELECT LENGTH(TRIM("  My SQL    "));
SELECT TRIM(LEADING '?' FROM '??MySQL???');
SELECT TRIM(TRAILING '?' FROM '??MySQL???');
SELECT TRIM(BOTH '?' FROM '??MySQL???');

-- REPLACE() 字符串替换
SELECT REPLACE('??My??SQL???','?','');
SELECT REPLACE('??My??SQL???','?','!*');

-- SUBSTRING() 字符串截取
SELECT SUBSTRING("MySQL", 1, 2);
SELECT SUBSTRING("MySQL", 3);
SELECT SUBSTRING("MySQL", -2);

-- [NOT] LIKE 模式匹配
%匹配1到多个字符，匹配1个字符
SELECT 'MySQL' LIKE 'M%';

--  转义字符处理
SELECT 'tom%' LIKE "%%%"; -- 无效
SELECT 'tom%' LIKE "%1%%" ESCAPE '1';

2）数组运算符及函数
CEIL()  进一取整
DIV()   整数除法
FLOOR() 舍一取整
MOD()   取模
POWER() 冥运算
ROUND()     四舍五入
TRUNCATE()  数字截取

SELECT CEIL(3.01); -- 4
SELECT FLOOR(3.99); -- 3
SELECT 3 DIV 4; -- 0
SELECT 5 MOD 3; -- 2
SELECT 5.3 MOD 3; -- 2.3
SELECT POWER(3,4); -- 81
SELECT ROUND(3.652, 2);  -- 3.65
SELECT ROUND(3.652, 1);  -- 3.7
SELECT ROUND(3.652, 2);  -- 4
SELECT TRUNCATE(125.89, 0); -- 125
SELECT TRUNCATE(125.89, 1); -- 125.8
SELECT TRUNCATE(125.89, -1); -- 120

3) 比较运算符与函数
[NOT] BETWEEN...AND...  [不]在范围之内
[NOT] IN()              [不]在列出值范围内
IS [NOT] NULL           [不]为空

SELECT 15 BETWEEN 1 AND 20; -- 1
SELECT 35 BETWEEN 1 AND 20; -- 0
SELECT 10 IN (5, 10, 15, 20); -- 1
SELECT 13 IN (5, 10, 15, 20); -- 1
SELECT NULL IS NULL; -- 1
SELECT 0 IS NULL; -- 0
SELECT '' IS NOT NULL; -- 1
SELECT * FROM test WHERE first_name IS NULL;

4) 日期时间函数

NOW()         当前日期和时间
CURDATE()     当前日期
CURTIME()     当前时间
DATE_ADD()    日期变化
DATEDIFF()    日期差值
DATE_FORMAT() 日期格式化

SELECT NOW(); -- 2016-07-24 20:35:18
SELECT CURDATE(); -- 2016-07-24
SELECT CURRTIME(); -- 20:36:52
SELECT DATE_ADD('2016-07-24', INTERVAL 100 DAY); -- 2016-07-24
SELECT DATE_ADD('2016-07-24', INTERVAL -100 DAY); -- 2016-04-15
SELECT DATE_ADD('2016-07-24', INTERVAL 1 YEAR); -- 2017-07-24
SELECT DATE_ADD('2016-07-24', INTERVAL 3 WEEK); -- 2016-08-14
SELECT DATEDIFF('2016-07-24', '2016-08-13'); -- -20
SELECT DATE_FORMAT('2016-07-24', '%m/%d/%Y'); -- 07/24/2016

**************************************************************
由于日期时间类型开发中很少用到，日期时间函数开发中也很少用到
**************************************************************

5）信息函数
CONNECTION_ID()   连接ID
DATABASE()        当前数据库
LAST_INSERT_ID()  最后插入记录的ID号
USER()            当前用户
VERSION()         版本信息

SELECT CONNECTION_ID();
SELECT DATABASE();
SELECT LAST_INSERT_ID();
SELECT USER();
SELECT VERSION();

6) 聚合函数
AVG()
COUNT()
MAX()
MIN()
SUM()

SELECT ROUND(AVG(goods_price)) AS avg_price FROM tdb_goods; -- 5654.81
SELECT COUNT(goods_id) AS counts FROM tdb_goods; -- 21
SELECT MAX(goods_price) AS max_price FROM tdb_goods; -- 28888.000
SELECT MIN(goods_price) AS min_price FROM tdb_goods; -- 99.000
SELECT SUM(goods_price) AS max_price FROM tdb_goods; -- 118751.000

7)加密函数
MD5()         信息摘要算法
PASSWORD()    密码算法

SELECT MD5('admin');
SELECT PASSWORD('admin');
SET PASSWORD = PASSWORD("654321");

第七章 自定义函数

1）自定义函数
- 用户自定义函数（user-defined function, UDF)是一种对MySQL扩展的途径，其用法与内置函数相同。

- 自定义函数的两个必要条件：参数和返回值
- 函数可以返回任意类型的值，同样可以接收这些类型的参数
- 参数数量不能超过1024个

2）创建自定义函数
CREATE FUNCTION function_name 
RETRUNS
{STRING|INTEGER|REAL|DECIMAL}
routine_body

函数体 routine_body
- 函数体有合法的SQL语句构成
- 可以是简单的SELECT和INSERT语句
- 如果是符合结构则使用BEGIN...END语句
- 复合结构可以包含声明，循环，控制结构

3) 不带参数的自定义函数

-- 创建汉字日期函数
SELECT DATE_FORMAT(NOW(), '%Y年%m月%日 %H点:%i分:%s秒');

CREATE FUNCTION f1() 
RETURNS VARCHAR(30)
RETURN DATE_FORMAT(NOW(), '%Y年%m月%d日 %H点:%i分:%s秒');

SELECT f1(); 
DROP FUNCTION f1;

4) 创建带参数的自定义函数
-- 求平均值
CREATE FUNCTION f2(num1 SMALLINT UNSIGNED, num2 SMALLINT UNSIGNED)
RETURNS FLOAT(10, 2) UNSIGNED
RETURN (num1+num2)/2;

SELECT f2(3,4); -- 3.5

5）创建复合结构函数体的自定义函数

-- 使;失效，以便写入多条独立的SQL语句
DELIMITER //

CREATE FUNCTION adduser(username VARCHAR(20))
RETURNS INT UNSIGNED
BEGIN
INSERT test(username) VALUES(username);
RETURN LAST_INSERT_ID();
END

SELECT adduser('Rose'); -- 4

-- 改回;
DELIMITER ;

************************************************************
开发中用的不多
************************************************************





















