12) 约束
- 约束保持数据的完整性和一致性。
- 约束分为表级约束和列级约束。
- 约束类型包括：
NOT NULL（非空约束）
PRIMARY KEY (主键约束)
UNIQUE KEY （唯一约束）
DEFAULT （默认约束）
FOREIGN KEY (外键约束）

13）外键约束 FORIEGN KEY
- 保持数据一致性，完整性。
- 实现一对一或一对多关系。

外键约束的要求：
- 父表和子表（具有外键列的表）必须使用相同的存储引擎，而且禁止使用临时表。
- 数据表的存储引擎只能为InnoDB。
- 外键列和参照列必须具有相似的数据类型。其中数字长度或者是否有符号位必须相同；而字符的长度则可以不同。
- 外键类和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引。

编辑数据表的默认存储引擎
- MySQL配置文件（my.ini): default-storage-engine=INNODB

-- 外键Demo
CREATE TABLE provinces (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  pname VARCHAR(20) NOT NULL
);

-- 查看默认引擎；
SHOW CREATE TABLE provinces；

-- pid 与 id 数据长度不同，创建表报错
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid BIGINT,
  FOREIGN KEY (pid) REFERENCES provinces (id)
);

-- pid 与 id 数据长度相同，有符号位不同，创建表仍然报错
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid SMALLINT,
  FOREIGN KEY (pid) REFERENCES provinces (id)
);

-- pid 与 id 数据长度相同，有符号位不同，创建表仍然报错
CREATE TABLE users (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid SMALLINT UNSIGNED,
  FOREIGN KEY (pid) REFERENCES provinces (id)
);

有外键的表是子表（users），参照列的表是父表（provinces）

-- 检查索引
SHOW INDEXES FROM provinces;

--以网格形式呈现，容易看 
SHOW INDEXES FROM provinces/G;

外键约束的参照操作 （父表参照列变化时，子表是否做相应的变化）
- CASCADE： 从父表删除或者更新且自动删除或更新子表中匹配的行
- SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL。
- RESTRICT：拒绝对父表的删除或更新操作。
- NO ACTION：标准SQL的关键字，在MySQL中与RESTRICT相同

-- 子表创建时，指定外键为CASCADE模式
CREATE TABLE users1 (
  id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(10) NOT NULL,
  pid SMALLINT UNSIGNED,
  FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE
);

-- 在provinces表中插入实验记录
INSERT provinces (pname) VALUES ('A');

-- 在users1表中插入实验记录, 成功
INSERT users1 (username, pid) VALUES ('Tom', 1);

-- 不成功，由于父表provinces id中没有7.
INSERT users1 (username, pid) VALUES ('Tom', 7);

-- 删除省份表中的记录3会把子表中pid=3的记录删除掉
DELETE FROM provinces WHERE id=3;

******************************************************
实际工作中一般不用物理的外键，而是使用逻辑的外键，原因是MYISAM不支持。所谓逻辑的外键是通过结构方式的定义，而不是使用物理外键。
******************************************************

14) 表级约束或列级约束
- 对一个数据列建立的约束，称为列级约束。
- 对多个数据列建立的约束，称为表级约束。
- 列级约束既可以在列定义时声明，也可以在列定义后声明。
- 表级约束只能在列定义后声明。

15）修改数据表

添加单列
ALTER TABLE tbl_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name]

-- 在最后插入age列
ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;

-- 在username后插入password列
ALTER TABLE users1 ADD password VARCHAR(32) NOT NULL AFTER username;

-- 在最前插入truename列
ALTER TABLE users1 ADD truename VARCHAR(20) NOT NULL FIRST;

添加多列 (添加多列不能指定位置关系，只能在最后)
ALTERTABLE tbl_name ADD [COLUMN] (col_name column_definition,...)

删除列
ALTER TABLE tbl_name DROP [COLUMN] col_name

-- 删除truename列
ALTER TABLE users1 DROP truename;

-- 同时删除password和age列
ALTER TABLE users1 DROP password, DROP age;

16）修改约束

添加主键约束：
ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...)

-- 创建了一个没有主键的表
CREATE TABLE users2 (
  username VARCHAR(20) NOT NULL,
  pid SMALLINT UNSIGNED
);

-- 先添加一列id
ALTER TABLE users2 ADD id SMALLINT UNSIGNED;

-- 在id上添加主键
ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);

添加唯一约束
ALTER TABLE tbl_name ADD [CONSTRAINT [sumbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name)

-- 为username添加唯一约束
ALTER TABLE users2 ADD UNIQUE (username);

添加外键约束
ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_definition

-- 为pid添加外键约束
ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces(id); 

添加/删除默认约束
ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}

-- 先添加一个age字段
ALTER TABLE users2 ADD age TINYINT UNSIGNED NOT NULL;

-- 为age添加默认约束
ALTER TABLE users2 ALTER age SET DEFAULT 15;

-- 删除age的默认约束
ALTER TABLE users2 ALTER age DROP DEFAULT;

17）删除约束

删除主键约束
ALTER TABLE tbl_name DROP PRIMARY KEY

-- 删除users2的主键约束
ALTER TABLE users2 DROP PRIMARY KEY;

删除唯一约束
ALTER TABLE tbl_name DROP {INDEX/KEY} index_name

-- 查看索引的名字
SHOW INDEXES FROM users2\G;

-- 删除唯一约束
ALTER TABLE users2 DROP INDEX username;

删除外键约束
ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol

-- 查看外键名称 users2_ibfk_1
SHOW CREATE TABLE users2;

-- 删除外键约束
ALTER TABLE users2 DROP FOREIGN KEY users2_ibfk_1;

-- 删除外键约束后，外键约束上的索引还存在，继续删除索引
ALTER TABLE users2 DROP INDEX pid;

18) 修改数据表

修改列定义
ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST | AFTER col_name]

-- 将users2的id字段移到最前面
ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;

-- 修改id的列定义为TINYINT, 可能会导致数据丢失
ALTER TABLE users2 MODIFY id TINYINT UNSIGNED NOT NULL;

修改列名称
ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name]

-- 修改id的列名称
ALTER TABLE users2 CHANGE pid p_id SMALLINT UNSIGNED;

数据表更名
方法1: ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name
方法2：RENAME TABLE tbl_name TO new_tbl_name [,tbl_name2 TO new_tbl_name2]...

-- 修改users2表名字
ALTER TABLE users2 RENAME users3;

*************************************
实际工作中尽量少用数据表和数据列的更名，当创建了索引，或者使用视图和存储过程中会引用表名和列名，变更名称会影响这些视图和存储过程的正常工作。
*************************************